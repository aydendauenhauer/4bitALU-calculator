module myfulladd(a,b,cin,sout,cout);
	input a,b,cin;
	output sout,cout;
	
	assign sout = a ^ b ^ cin;
	assign cout = (a & b) | (b & cin) | (a & cin);
endmodule



module myadder4(X,Y,c0,S,v,c4);
	input [3:0]X,Y;
	input c0;
	output[3:0]S;
	output v,c4;
	wire [3:1]C;
	
	myfulladd(X[0],Y[0],c0,S[0],C[1]);
	myfulladd(X[1],Y[1],C[1],S[1],C[2]);
	myfulladd(X[2],Y[2],C[2],S[2],C[3]);
	myfulladd(X[3],Y[3],C[3],S[3],c4);
	assign v = C[3] ^ c4;
endmodule





module myALU4(P,A,B,R,Z,V,C4);
    // This declaration section has been completed for you.
    // For simplicity, an actual C0 input is not needed,
    // as C0 is always the same as one of the P bits...
    input [3:0]P,A,B;
    output [3:0]R;
    output Z,V,C4;
    reg [3:0]Y; // Use reg instead of wire for always blocks.
    
    always @(*)
        // The case statement serves as a 4:1 MUX with P[2]
        // and P[1] select signals. Note that the notation
        // 2'b means a 2-bit binary value, so the first
        // case 2'b00 corresponds to when P[2]=0 and P[1]=0.
        // Complete the lines for the first and third cases.
        case(P[2:1])
            2'b00:
            2'b01: Y = ~B;
            2'b10:
            2'b11: Y = 4'b1111;
        endcase
    
    // The below instance of myadder4 assumes the order
    // (X,Y,C0,S,V,C4), so you may have to change the
    // ordering to work with your myadder4 from lab 5.
    // Fill in the bit of P that should serve as C0.
    myadder4 U1(A,Y,P[?],R,V,C4);
    
    // Complete the assign statement to make Z=1 when R=0000.
    assign Z = ~R[0] & ~R[1] & ~R[2] & ~R[3];
endmodule
